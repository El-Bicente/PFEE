import vtk
import pandas as pd

def build_point_weights(vtk_poly, points):
    pointWeights = vtk.vtkDoubleArray()
    pointWeights.SetName("PointWeight")
    pointWeights.SetNumberOfComponents(1)
    pointWeights.SetNumberOfTuples(vtk_poly.GetNumberOfPoints())

    points.apply(lambda x: pointWeights.SetTuple1(int(x[0]), x[4]), axis = 1)
    return pointWeights

def build_face_weights(vtk_poly, cells, name, cell_number, start):
    cellWeights = vtk.vtkDoubleArray()
    cellWeights.SetName(name)
    cellWeights.SetNumberOfComponents(1)
    cellWeights.SetNumberOfTuples(vtk_poly.GetNumberOfCells())

    cells.apply(lambda x: cellWeights.SetTuple1(start + int(x[0]), x[1]), axis = 1)
    
    for i in range(0, start):
        cellWeights.SetTuple1(int(i), float("nan"))
    return cellWeights

def build_line_weights(vtk_poly, cells, name, cell_number, start):
    cellWeights = vtk.vtkDoubleArray()
    cellWeights.SetName(name)
    cellWeights.SetNumberOfComponents(1)
    cellWeights.SetNumberOfTuples(vtk_poly.GetNumberOfCells())

    cells.apply(lambda x: cellWeights.SetTuple1(int(x[0]), x[1]), axis = 1)

    for i in range(start + cell_number, vtk_poly.GetNumberOfCells()):
        cellWeights.SetTuple1(int(i), float("nan"))
    return cellWeights

def init_points(vtk_pts, points):
    points.apply(lambda x: vtk_pts.InsertPoint(int(x[0]), x[1], x[2], x[3]), axis = 1)

def build_line(points):
    line = vtk.vtkLine()
    line.GetPointIds().SetId(0, int(points[0]))
    line.GetPointIds().SetId(1, int(points[1]))
    return line

def init_lines(vtk_cells, lines):
    """
    return a table with 2 columns {Cell ID (generated by vtk), Weight (read in input)}
    """
    return lines.apply(lambda x: pd.Series({"ID": vtk_cells.InsertNextCell(build_line(x)), "Weight": x[2]}), axis = 1)

def build_cell(x):
    cell = vtk.vtkTriangle()
    Ids = cell.GetPointIds()
    Ids.SetId(0,int(x[0]))
    Ids.SetId(1,int(x[1]))
    Ids.SetId(2,int(x[2]))
    return cell

def init_faces(vtk_cells, faces):
    """
    return a table with 2 columns {Cell ID (generated by vtk), Weight (read in input)}
    """
    return faces.apply(lambda x: pd.Series({"ID": vtk_cells.InsertNextCell(build_cell(x)), "Weight": x[3]}), axis = 1)

def build_vectors(vtk_poly_glyph, vectors_dir):
    vectors = vtk.vtkDoubleArray()
    vectors.SetName("Vector Field")
    vectors.SetNumberOfComponents(3)
    vectors.SetNumberOfTuples(vtk_poly_glyph.GetNumberOfPoints())
    vectors_dir.apply(lambda x: vectors.SetTuple3(x[0],x[1], x[2], x[3]), axis = 1)
    vtk_poly_glyph.GetPointData().AddArray(vectors)
    vtk_poly_glyph.GetPointData().SetActiveVectors("Vector Field")

def build_mesh(faces, points, lines):
    vtk_poly = vtk.vtkPolyData()

    vtk_pts = vtk.vtkPoints()
    vtk_cells = vtk.vtkCellArray()
    vtk_lines = vtk.vtkCellArray()

    init_points(vtk_pts, points)
    lines_weight = init_lines(vtk_lines, lines)
    faces_weight = init_faces(vtk_cells, faces)

    vtk_poly.SetPoints(vtk_pts)
    vtk_poly.SetPolys(vtk_cells)
    vtk_poly.SetLines(vtk_lines)
    
    start_line = 0
    start_face = 0
    for i in range(vtk_poly.GetNumberOfCells()):
        if start_line == 0 and vtk_poly.GetCell(i).GetNumberOfPoints() == 2:
            start_line = i
        if start_face == 0 and vtk_poly.GetCell(i).GetNumberOfPoints() == 3:
            start_face = i

    vtk_pts_weight = build_point_weights(vtk_poly, points)
    vtk_poly.GetPointData().SetScalars(vtk_pts_weight)
    vtk_poly.GetPointData().SetActiveScalars("PointWeight")

    vtk_lines_weight = build_line_weights(vtk_poly, lines_weight, "LineWeight", vtk_poly.GetNumberOfLines(), start_line)
    vtk_poly.GetCellData().AddArray(vtk_lines_weight)
    
    vtk_faces_weight = build_face_weights(vtk_poly, faces_weight, "FacesWeight", vtk_poly.GetNumberOfPolys(), start_face)
    vtk_poly.GetCellData().AddArray(vtk_faces_weight)

    writer = vtk.vtkXMLPolyDataWriter()
    writer.SetFileName('output.vtp')
    writer.SetInputData(vtk_poly)

    writer.Write()

def build_glyph(vectors_pts, vectors_dir):
    vtk_poly_glyph = vtk.vtkPolyData()
    vtk_vec_pts = vtk.vtkPoints()

    init_points(vtk_vec_pts, vectors_pts)
    vtk_poly_glyph.SetPoints(vtk_vec_pts)

    build_vectors(vtk_poly_glyph, vectors_dir)
    arrow_source = vtk.vtkArrowSource()

    add_arrows = vtk.vtkGlyph3D()
    add_arrows.SetInputData(vtk_poly_glyph)
    add_arrows.SetSourceConnection(arrow_source.GetOutputPort())
    add_arrows.Update()

    writer = vtk.vtkXMLPolyDataWriter()
    writer.SetInputConnection(add_arrows.GetOutputPort())
    writer.SetFileName('output2.vtp')
    writer.SetInputData(vtk_poly_glyph)

    writer.Write()

def main():
    faces = pd.read_csv("cells.csv")
    points = pd.read_csv("points.csv")
    lines = pd.read_csv("lines.csv")

    vectors_pts = pd.read_csv("vectors.csv")
    vectors_dir = pd.read_csv("vectors_dir.csv")

    build_mesh(faces, points, lines)
    build_glyph(vectors_pts, vectors_dir)

if __name__ == "__main__":
    main()
